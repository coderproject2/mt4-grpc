// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api.proto

package api_pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _api_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on UserInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Group

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for Leverage

	// no validation rules for Balance

	// no validation rules for Credit

	// no validation rules for AgentAccount

	return nil
}

// UserInfoValidationError is the validation error returned by
// UserInfo.Validate if the designated constraints aren't met.
type UserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoValidationError) ErrorName() string { return "UserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoValidationError{}

// Validate checks the field values on UserInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserInfoRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Login

	return nil
}

// UserInfoRequestValidationError is the validation error returned by
// UserInfoRequest.Validate if the designated constraints aren't met.
type UserInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoRequestValidationError) ErrorName() string { return "UserInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoRequestValidationError{}

// Validate checks the field values on UserInfoResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UserInfoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserInfoResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UserInfoResponseValidationError is the validation error returned by
// UserInfoResponse.Validate if the designated constraints aren't met.
type UserInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInfoResponseValidationError) ErrorName() string { return "UserInfoResponseValidationError" }

// Error satisfies the builtin error interface
func (e UserInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInfoResponseValidationError{}

// Validate checks the field values on AddUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Email

	// no validation rules for Password

	// no validation rules for PasswordInvestor

	// no validation rules for Group

	// no validation rules for Name

	// no validation rules for Login

	// no validation rules for Enabled

	// no validation rules for City

	// no validation rules for Phone

	return nil
}

// AddUserInfoValidationError is the validation error returned by
// AddUserInfo.Validate if the designated constraints aren't met.
type AddUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserInfoValidationError) ErrorName() string { return "AddUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e AddUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserInfoValidationError{}

// Validate checks the field values on AddUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddUserRequestValidationError is the validation error returned by
// AddUserRequest.Validate if the designated constraints aren't met.
type AddUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserRequestValidationError) ErrorName() string { return "AddUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserRequestValidationError{}

// Validate checks the field values on AddUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// AddUserResponseValidationError is the validation error returned by
// AddUserResponse.Validate if the designated constraints aren't met.
type AddUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserResponseValidationError) ErrorName() string { return "AddUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserResponseValidationError{}

// Validate checks the field values on UpdateUserInfo with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *UpdateUserInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Email

	// no validation rules for Name

	// no validation rules for Enabled

	// no validation rules for Password

	// no validation rules for PasswordInvestor

	// no validation rules for Phone

	// no validation rules for City

	// no validation rules for Group

	return nil
}

// UpdateUserInfoValidationError is the validation error returned by
// UpdateUserInfo.Validate if the designated constraints aren't met.
type UpdateUserInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserInfoValidationError) ErrorName() string { return "UpdateUserInfoValidationError" }

// Error satisfies the builtin error interface
func (e UpdateUserInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserInfoValidationError{}

// Validate checks the field values on UpdateUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserRequestValidationError is the validation error returned by
// UpdateUserRequest.Validate if the designated constraints aren't met.
type UpdateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserRequestValidationError) ErrorName() string {
	return "UpdateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserRequestValidationError{}

// Validate checks the field values on UpdateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// UpdateUserResponseValidationError is the validation error returned by
// UpdateUserResponse.Validate if the designated constraints aren't met.
type UpdateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserResponseValidationError) ErrorName() string {
	return "UpdateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserResponseValidationError{}

// Validate checks the field values on DeleteUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *DeleteUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Login

	return nil
}

// DeleteUserRequestValidationError is the validation error returned by
// DeleteUserRequest.Validate if the designated constraints aren't met.
type DeleteUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserRequestValidationError) ErrorName() string {
	return "DeleteUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserRequestValidationError{}

// Validate checks the field values on DeleteUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// DeleteUserResponseValidationError is the validation error returned by
// DeleteUserResponse.Validate if the designated constraints aren't met.
type DeleteUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteUserResponseValidationError) ErrorName() string {
	return "DeleteUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteUserResponseValidationError{}

// Validate checks the field values on ResetPasswordInfo with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetPasswordInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Password

	// no validation rules for PasswordInvestor

	return nil
}

// ResetPasswordInfoValidationError is the validation error returned by
// ResetPasswordInfo.Validate if the designated constraints aren't met.
type ResetPasswordInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordInfoValidationError) ErrorName() string {
	return "ResetPasswordInfoValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordInfoValidationError{}

// Validate checks the field values on ResetPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetPasswordRequestValidationError is the validation error returned by
// ResetPasswordRequest.Validate if the designated constraints aren't met.
type ResetPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordRequestValidationError) ErrorName() string {
	return "ResetPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordRequestValidationError{}

// Validate checks the field values on ResetPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetPasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Code

	// no validation rules for Message

	return nil
}

// ResetPasswordResponseValidationError is the validation error returned by
// ResetPasswordResponse.Validate if the designated constraints aren't met.
type ResetPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordResponseValidationError) ErrorName() string {
	return "ResetPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordResponseValidationError{}

// Validate checks the field values on FundsInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *FundsInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Amount

	// no validation rules for IsCredit

	// no validation rules for Comment

	return nil
}

// FundsInfoValidationError is the validation error returned by
// FundsInfo.Validate if the designated constraints aren't met.
type FundsInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FundsInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FundsInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FundsInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FundsInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FundsInfoValidationError) ErrorName() string { return "FundsInfoValidationError" }

// Error satisfies the builtin error interface
func (e FundsInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFundsInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FundsInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FundsInfoValidationError{}

// Validate checks the field values on FundsRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FundsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FundsRequestValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUpdateMask()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FundsRequestValidationError{
				field:  "UpdateMask",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FundsRequestValidationError is the validation error returned by
// FundsRequest.Validate if the designated constraints aren't met.
type FundsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FundsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FundsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FundsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FundsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FundsRequestValidationError) ErrorName() string { return "FundsRequestValidationError" }

// Error satisfies the builtin error interface
func (e FundsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFundsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FundsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FundsRequestValidationError{}

// Validate checks the field values on FundsResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FundsResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Balance

	// no validation rules for Credit

	return nil
}

// FundsResponseValidationError is the validation error returned by
// FundsResponse.Validate if the designated constraints aren't met.
type FundsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FundsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FundsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FundsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FundsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FundsResponseValidationError) ErrorName() string { return "FundsResponseValidationError" }

// Error satisfies the builtin error interface
func (e FundsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFundsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FundsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FundsResponseValidationError{}

// Validate checks the field values on TradeInfo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *TradeInfo) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ticket

	// no validation rules for Login

	// no validation rules for Symbol

	// no validation rules for Digits

	// no validation rules for Cmd

	// no validation rules for Volume

	// no validation rules for OpenTime

	// no validation rules for State

	// no validation rules for OpenPrice

	// no validation rules for Sl

	// no validation rules for Tp

	// no validation rules for CloseTime

	// no validation rules for Expiration

	// no validation rules for Commission

	// no validation rules for ClosePrice

	// no validation rules for Profit

	// no validation rules for Magic

	// no validation rules for Comment

	return nil
}

// TradeInfoValidationError is the validation error returned by
// TradeInfo.Validate if the designated constraints aren't met.
type TradeInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TradeInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TradeInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TradeInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TradeInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TradeInfoValidationError) ErrorName() string { return "TradeInfoValidationError" }

// Error satisfies the builtin error interface
func (e TradeInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTradeInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TradeInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TradeInfoValidationError{}

// Validate checks the field values on OpenTradeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpenTradeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Login

	// no validation rules for Symbol

	// no validation rules for Cmd

	// no validation rules for Price

	// no validation rules for Slippage

	// no validation rules for Sl

	// no validation rules for Tp

	// no validation rules for Volume

	// no validation rules for Comment

	return nil
}

// OpenTradeRequestValidationError is the validation error returned by
// OpenTradeRequest.Validate if the designated constraints aren't met.
type OpenTradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenTradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenTradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenTradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenTradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenTradeRequestValidationError) ErrorName() string { return "OpenTradeRequestValidationError" }

// Error satisfies the builtin error interface
func (e OpenTradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenTradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenTradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenTradeRequestValidationError{}

// Validate checks the field values on OpenTradeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *OpenTradeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ticket

	// no validation rules for ErrorCode

	// no validation rules for Message

	return nil
}

// OpenTradeResponseValidationError is the validation error returned by
// OpenTradeResponse.Validate if the designated constraints aren't met.
type OpenTradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OpenTradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OpenTradeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OpenTradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OpenTradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OpenTradeResponseValidationError) ErrorName() string {
	return "OpenTradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e OpenTradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOpenTradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OpenTradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OpenTradeResponseValidationError{}

// Validate checks the field values on UpdateTradeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTradeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ticket

	// no validation rules for Price

	// no validation rules for Sl

	// no validation rules for Tp

	return nil
}

// UpdateTradeRequestValidationError is the validation error returned by
// UpdateTradeRequest.Validate if the designated constraints aren't met.
type UpdateTradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTradeRequestValidationError) ErrorName() string {
	return "UpdateTradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTradeRequestValidationError{}

// Validate checks the field values on UpdateTradeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateTradeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrorCode

	// no validation rules for Message

	return nil
}

// UpdateTradeResponseValidationError is the validation error returned by
// UpdateTradeResponse.Validate if the designated constraints aren't met.
type UpdateTradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateTradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateTradeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateTradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateTradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateTradeResponseValidationError) ErrorName() string {
	return "UpdateTradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateTradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateTradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateTradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateTradeResponseValidationError{}

// Validate checks the field values on CloseTradeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CloseTradeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Ticket

	// no validation rules for Volume

	return nil
}

// CloseTradeRequestValidationError is the validation error returned by
// CloseTradeRequest.Validate if the designated constraints aren't met.
type CloseTradeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTradeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTradeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTradeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTradeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTradeRequestValidationError) ErrorName() string {
	return "CloseTradeRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTradeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTradeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTradeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTradeRequestValidationError{}

// Validate checks the field values on CloseTradeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CloseTradeResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ErrorCode

	// no validation rules for Message

	return nil
}

// CloseTradeResponseValidationError is the validation error returned by
// CloseTradeResponse.Validate if the designated constraints aren't met.
type CloseTradeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseTradeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseTradeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseTradeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseTradeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseTradeResponseValidationError) ErrorName() string {
	return "CloseTradeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseTradeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseTradeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseTradeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseTradeResponseValidationError{}
